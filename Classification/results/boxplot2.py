import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Provided data
# data = {
#     'Mapping': [0.876923077, 1, 0.763888889, 0.571428571, 0.769230769, 0.777777778, 1, 0.704545455, 0.583333333, 0.9, 0.75, 0.935483871, 0.986111111, 0.68, 0.5, 0.7, 0.038461538, 0.107142857, 0.290322581, 0.766666667, 0.461538462, 0.5625, 0.333333333, 0.285714286, 0.4375, 0.681818182, 0.333333333, 0, 0.45, 0.115384615, 0.105263158, 0.846153846, 1, 0.833333333, 0.888888889, 1, 0.318181818, 0.368421053, 0.235294118, 0, 0.4, 1, 0.052631579, 0.263157895, 0.315789474, 0.631578947, 0.315789474, 0.421052632, 0.928571429, 0.5, 0, 0, 0.4, 0.375, 0.941176471, 0.733333333, 0.818181818, 0.571428571, 0.714285714, 1, 1, 1, 1, 1, 0.3, 0.631578947, 0.833333333, 0.714285714, 1, 0.869565217, 0.055555556, 0.285714286, 0.571428571, 0.428571429, 0.428571429, 0.368421053, 0.857142857, 0.285714286, 0.857142857, 0.888888889, 0.105263158, 0.157894737, 0.473684211, 0.210526316, 0.315789474, 0.217391304, 0.633333333, 0.894736842, 0.7, 0.8, 0.666666667, 0, 0.352941176, 1, 0.95, 0.578947368, 0.571428571, 0.846153846, 0.421052632, 0.2, 0.294117647, 1, 0.966666667, 0.714285714, 0.666666667, 1, 1, 0, 1, 0.333333333, 1, 1, 0, 0.857142857],
#     'Prediction':[0.329479769, 0.022727273, 0.168711656, 0.049382716, 0.394736842, 0.875, 0.01793722, 0.221428571, 0.21875, 0.111111111, 0.034682081, 0.276190476, 0.276264591, 0.072033898, 0.047058824, 0.142857143, 1, 0.0375, 0.169811321, 0.092, 0.1875, 0.142857143, 0.5, 0.8, 0.097222222, 0.348837209, 0.05, 0, 0.130434783, 0.046153846, 0.285714286, 0.084942085, 0.055045872, 0.063291139, 0.31372549, 0.008042895, 0.08974359, 0.072916667, 0.19047619, 0, 0.072727273, 0.005586592, 0.5, 0.3125, 0.193548387, 0.19047619, 0.090909091, 0.242424242, 0.273684211, 0.033333333, 0, 0, 0.012987013, 0.428571429, 0.064, 0.188034188, 0.04787234, 0.019230769, 0.067567568, 0.189189189, 0.091743119, 0.071428571, 0.031446541, 0.061728395, 0.12, 0.082191781, 0.054945055, 0.106382979, 0.040816327, 0.689655172, 0.041666667, 0.025, 0.030769231, 0.035714286, 0.024390244, 0.14893617, 0.137931034, 0.021052632, 0.285714286, 0.087912088, 0.2, 0.073170732, 0.108433735, 0.093023256, 0.084507042, 0.263157895, 0.243589744, 0.075892857, 0.608695652, 0.050632911, 0.018018018, 0, 0.260869565, 0.01754386, 0.072796935, 0.224489796, 0.076190476, 0.611111111, 0.08, 0.038834951, 0.151515152, 0.555555556, 0.157608696, 0.180722892, 0.05, 0.027522936, 0.307692308, 0, 0.68, 0.027777778, 0.6, 0.055045872, 0, 0.088235294],
#     'Jaccard': [0.314917127, 0.022727273, 0.160349854, 0.047619048, 0.352941176, 0.7, 0.01793722, 0.202614379, 0.189189189, 0.109756098, 0.034285714, 0.271028037, 0.275193798, 0.069672131, 0.04494382, 0.134615385, 0.038461538, 0.028571429, 0.12, 0.089494163, 0.153846154, 0.128571429, 0.25, 0.266666667, 0.086419753, 0.3, 0.045454545, 0, 0.1125, 0.034090909, 0.083333333, 0.08365019, 0.055045872, 0.0625, 0.301886792, 0.008042895, 0.075268817, 0.064814815, 0.117647059, 0, 0.06557377, 0.005586592, 0.05, 0.166666667, 0.136363636, 0.171428571, 0.075949367, 0.181818182, 0.268041237, 0.032258065, 0, 0, 0.012738854, 0.25, 0.06374502, 0.176, 0.047368421, 0.018957346, 0.065789474, 0.189189189, 0.091743119, 0.071428571, 0.031446541, 0.061728395, 0.09375, 0.078431373, 0.054347826, 0.102040816, 0.040816327, 0.625, 0.024390244, 0.023529412, 0.030075188, 0.034090909, 0.023622047, 0.118644068, 0.134831461, 0.02, 0.272727273, 0.086956522, 0.074074074, 0.052631579, 0.096774194, 0.068965517, 0.071428571, 0.135135135, 0.213483146, 0.075221239, 0.482758621, 0.05, 0.017857143, 0, 0.176470588, 0.01754386, 0.072519084, 0.192982456, 0.072072072, 0.55, 0.072072072, 0.033613445, 0.111111111, 0.555555556, 0.156756757, 0.168539326, 0.048780488, 0.027522936, 0.307692308, 0, 0.68, 0.026315789, 0.6, 0.055045872, 0, 0.086956522]
# }


data = {
    'Ground Truth': [1.00, 1.00, 0.99, 0.95, 0.94, 0.92, 0.82, 0.81, 0.79, 0.78, 0.77, 0.77, 0.74, 0.73, 0.73, 0.68, 0.68, 0.68, 0.64, 0.63, 0.63, 0.63, 0.60, 0.58, 0.58, 0.58, 0.53, 0.53, 0.50, 0.50, 0.47, 0.47, 0.43, 0.41, 0.41, 0.41, 0.40, 0.40, 0.40, 0.40, 0.39, 0.37, 0.37, 0.36, 0.33, 0.30, 0.30, 0.29, 0.27, 0.24, 0.23, 0.21, 0.12, 0.00],
    'Detection':  [0.03, 0.06, 0.83, 0.72, 0.73, 0.75, 0.93, 0.29, 0.75, 0.85, 0.97, 1.00, 0.47, 0.90, 0.96, 0.93, 0.90, 0.87, 1.00, 0.44, 0.43, 0.55, 0.33, 0.79, 0.55, 0.46, 0.59, 0.91, 0.93, 0.77, 0.64, 0.36, 0.05, 0.70, 0.70, 0.52, 0.05, 0.67, 1.00, 0.14, 0.87, 0.24, 0.47, 0.22, 0.75, 0.67, 0.32, 0.25, 0.88, 0.60, 0.80, 0.38, 0.80, 0.00],
    'Jaccard':    [0.03, 0.06, 0.82, 0.69, 0.70, 0.71, 0.78, 0.27, 0.63, 0.68, 0.75, 0.77, 0.40, 0.68, 0.71, 0.65, 0.63, 0.62, 0.64, 0.35, 0.34, 0.41, 0.27, 0.50, 0.39, 0.34, 0.38, 0.50, 0.48, 0.43, 0.37, 0.26, 0.05, 0.35, 0.35, 0.30, 0.05, 0.33, 0.40, 0.12, 0.37, 0.17, 0.26, 0.16, 0.30, 0.26, 0.18, 0.15, 0.26, 0.21, 0.22, 0.16, 0.11, 0.00]
}

data = {
    "Mapping Accuracy": [0.40, 0.41, 0.63, 0.30, 0.29, 0.53, 0.47, 0.36, 0.73, 0.74, 
                     1.00, 0.37, 0.63, 0.37, 0.43, 0.23, 0.39, 0.63, 0.60, 0.27,
                     0.77, 0.41, 0.94, 0.68, 0.82, 0.58, 0.41, 0.33, 0.30, 0.81,
                     0.12, 0.40, 0.58, 0.78, 0.92, 0.40, 0.50, 0.99, 0.95, 0.40,
                     0.73, 0.58, 0.77, 0.53, 0.50],
    "Detection Accuracy":    [0.05, 0.52, 0.44, 0.67, 0.25, 0.59, 0.36, 0.22, 0.96, 0.47,
                    0.03, 0.24, 0.43, 0.47, 0.05, 0.80, 0.87, 0.55, 0.33, 0.88,
                    0.97, 0.70, 0.73, 0.93, 0.93, 0.79, 0.70, 0.75, 0.32, 0.29,
                    0.80, 0.67, 0.55, 0.85, 0.75, 1.00, 0.93, 0.83, 0.72, 0.14,
                    0.90, 0.46, 1.00, 0.91, 0.77],
    "Jaccard Similarity":      [0.05, 0.30, 0.35, 0.26, 0.15, 0.38, 0.26, 0.16, 0.71, 0.40,
                    0.03, 0.17, 0.34, 0.26, 0.26, 0.22, 0.37, 0.41, 0.27, 0.26,
                    0.75, 0.35, 0.70, 0.65, 0.78, 0.50, 0.35, 0.30, 0.18, 0.27,
                    0.11, 0.33, 0.39, 0.68, 0.71, 0.40, 0.48, 0.82, 0.69, 0.12,
                    0.68, 0.34, 0.77, 0.50, 0.43]
}




# Create a DataFrame
df = pd.DataFrame(data)
black_palette = ['#4f4f50', '#777878', '#a2a3a3', '#d0d0d0', '#ffffff']

# Melt the DataFrame
df_melted = df.melt(var_name='Method', value_name='Accuracy')

# Create a boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x='Method', y='Accuracy', data=df_melted, palette=black_palette)
plt.title('Boxplot of Accuracy', fontsize=16)
plt.xlabel('Method', fontsize=16)
plt.ylabel('', fontsize=16)
plt.xticks(fontsize=16)
plt.show()

# Create a DataFrame
df = pd.DataFrame(data)
black_palette = ['#4f4f50', '#777878', '#a2a3a3', '#d0d0d0', '#ffffff']

# Melt the DataFrame
df_melted = df.melt(var_name='Method', value_name='Accuracy')

# Create a boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x='Method', y='Accuracy', data=df_melted, palette=black_palette)
# plt.title('Boxplot of Accuracy', fontsize=16)
plt.xlabel('Method', fontsize=14)
plt.ylabel('', fontsize=11)
plt.xticks(fontsize=14)

# Overlay mean lines
means = df.mean().values
for i, mean in enumerate(means):
    plt.plot([i], [mean], marker='o', markersize=7, color='Black')

# plt.legend(['Mean'], loc='upper right') 

plt.show()


# Create a DataFrame
df = pd.DataFrame(data)
black_palette = ['#4f4f50', '#777878', '#a2a3a3', '#d0d0d0', '#ffffff']

# Melt the DataFrame
df_melted = df.melt(var_name='Method', value_name='Accuracy')

# Create a boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x='Method', y='Accuracy', data=df_melted, palette=black_palette)

# Calculate and display the minimum, maximum, average, and mean values
for i, method in enumerate(df_melted['Method'].unique()):
    subset = df_melted[df_melted['Method'] == method]
    min_val = subset['Accuracy'].min()
    max_val = subset['Accuracy'].max()
    avg_val = subset['Accuracy'].mean()
    mean_val = subset['Accuracy'].mean()  # Mean and average are the same in this context
    if method == 'Jaccard Similarity' or method == 'Detection Accuracy':
        min_val = 0.05
    # Display the values on the boxplot
    plt.text(i, min_val, f'Min: {min_val:.2f}', ha='center', va='bottom', color='black')
    plt.text(i, max_val, f'Max: {max_val:.2f}', ha='center', va='top', color='black')
    # plt.text(i, avg_val, f'Avg: {avg_val:.2f}', ha='center', va='center', color='green')
    plt.text(i, mean_val, f'Mean: {mean_val:.2f}', ha='center', va='center', color='black')
    print(min_val," ", avg_val," ", mean_val," ", max_val)

plt.xlabel('Method', fontsize=14)
plt.ylabel('', fontsize=11)
plt.xticks(fontsize=14)
plt.show()



# Create a DataFrame
df = pd.DataFrame(data)
black_palette = ['#4f4f50', '#777878', '#a2a3a3', '#d0d0d0', '#ffffff']

# Melt the DataFrame
df_melted = df.melt(var_name='Method', value_name='Accuracy')

# Create a boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x='Method', y='Accuracy', data=df_melted, palette=black_palette)

# Calculate and display the minimum, maximum, average, mean, Q1, and Q3 values
for i, method in enumerate(df_melted['Method'].unique()):
    subset = df_melted[df_melted['Method'] == method]
    min_val = subset['Accuracy'].min()
    max_val = subset['Accuracy'].max()
    avg_val = subset['Accuracy'].mean()
    mean_val = subset['Accuracy'].mean()  # Mean and average are the same in this context
    q1_val = subset['Accuracy'].quantile(0.25)
    q3_val = subset['Accuracy'].quantile(0.75)

    # Display the values on the boxplot
    plt.text(i, min_val, f'Min: {min_val:.2f}', ha='center', va='bottom', color='black')
    plt.text(i, max_val, f'Max: {max_val:.2f}', ha='center', va='top', color='black')
    plt.text(i, q1_val, f'Q1: {q1_val:.2f}', ha='center', va='center', color='blue')
    plt.text(i, q3_val, f'Q3: {q3_val:.2f}', ha='center', va='center', color='red')
    plt.text(i, mean_val, f'Mean: {mean_val:.2f}', ha='center', va='center', color='black')
    print(min_val," ", avg_val," ", mean_val," ", max_val, " ", q1_val, " ", q3_val)

plt.xlabel('Method', fontsize=14)
plt.ylabel('', fontsize=11)
plt.xticks(fontsize=14)
plt.show()





L_intersect_M = [
    57, 4, 55, 4, 30, 21, 4, 31, 21, 9, 6, 29, 71, 17, 4, 14, 1, 3, 9, 23, 
    6, 9, 1, 8, 7, 15, 1, 0, 9, 3, 2, 22, 6, 5, 16, 3, 7, 7, 4, 0, 8, 1, 1, 
    5, 6, 12, 6, 8, 26, 1, 0, 0, 2, 3, 16, 22, 9, 4, 5, 7, 10, 17, 10, 10, 
    3, 12, 5, 10, 10, 20, 1, 2, 8, 3, 3, 7, 12, 2, 6, 8, 2, 3, 9, 4, 6, 5, 
    19, 17, 14, 4, 2, 0, 6, 1, 19, 11, 8, 11, 8, 4, 5, 10, 29, 15, 4, 6, 20, 
    0, 34, 1, 33, 6, 0, 6
]
L_minus_M_Nc = [
    116, 172, 200, 77, 46, 3, 219, 109, 75, 72, 167, 76, 186, 219, 81, 84, 0, 
    77, 44, 227, 26, 54, 1, 2, 65, 28, 19, 7, 60, 62, 5, 237, 103, 74, 35, 245, 
    71, 89, 17, 0, 102, 178, 1, 11, 25, 51, 60, 25, 69, 29, 15, 11, 152, 4, 234, 
    95, 179, 204, 69, 30, 99, 221, 220, 152, 22, 134, 86, 84, 235, 9, 23, 78, 252, 
    81, 120, 40, 75, 93, 15, 83, 8, 38, 74, 39, 65, 14, 59, 207, 9, 75, 109, 14, 
    17, 56, 242, 38, 97, 7, 92, 99, 28, 8, 155, 68, 76, 212, 45, 41, 16, 35, 22, 103, 32, 62
]
L_Sum = [
    173, 176, 255, 81, 76, 24, 223, 140, 96, 81, 173, 105, 257, 236, 85, 98, 1,
    80, 53, 250, 32, 63, 2, 10, 72, 43, 20, 7, 69, 65, 7, 259, 109, 79, 51, 248,
    78, 96, 21, 0, 110, 179, 2, 16, 31, 63, 66, 33, 95, 30, 15, 11, 154, 7, 250,
    117, 188, 208, 74, 37, 109, 238, 230, 162, 25, 146, 91, 94, 245, 29, 24, 80,
    260, 84, 123, 47, 87, 95, 21, 91, 10, 41, 83, 43, 71, 19, 78, 224, 23, 79, 111,
    14, 23, 57, 261, 49, 105, 18, 100, 103, 33, 18, 184, 83, 80, 218, 65, 41, 50,
    36, 55, 109, 32, 68
]


M = [
    65, 4, 72, 7, 39, 27, 4, 44, 36, 10, 8, 31, 72, 25, 8, 20, 26, 28, 31, 30,
    13, 16, 3, 28, 16, 22, 3, 5, 20, 26, 19, 26, 6, 6, 18, 3, 22, 19, 17, 16, 20,
    1, 19, 19, 19, 19, 19, 19, 28, 2, 1, 1, 5, 8, 17, 30, 11, 7, 7, 7, 10, 17, 10,
    10, 10, 19, 6, 14, 10, 23, 18, 7, 14, 7, 7, 19, 14, 7, 7, 9, 19, 19, 19, 19, 19,
    23, 30, 19, 20, 5, 3, 1, 17, 1, 20, 19, 14, 13, 19, 20, 17, 10, 30, 21, 6, 6, 20,
    7, 34, 3, 33, 6, 1, 7
]

# Print the lengths of lists to ensure they have the same length
print(len(L_intersect_M), len(L_minus_M_Nc), len(L_Sum), len(M))


# Provided data
data = {
    
    'All L' :L_Sum,
    'Mapping': M,
    'L_intersect_M': L_intersect_M,
    'L_minus_M_Nc':L_minus_M_Nc,
    'M-L' : [
    8, 0, 17, 3, 9, 6, 0, 13, 15, 1, 2, 2, 1, 8, 4, 6, 25, 25, 22, 7, 7, 7, 2, 20, 9, 7, 2, 5, 11, 23, 17, 
    4, 0, 1, 2, 0, 15, 12, 13, 16, 12, 0, 18, 14, 13, 7, 13, 11, 2, 1, 1, 1, 3, 5, 1, 8, 2, 3, 2, 0, 0, 0, 0, 
    0, 7, 7, 1, 4, 0, 3, 17, 5, 6, 4, 4, 12, 2, 5, 1, 1, 17, 16, 10, 15, 13, 18, 11, 2, 6, 1, 1, 1, 11, 0, 1, 
    8, 6, 2, 11, 16, 12, 0, 1, 6, 2, 0, 0, 7, 0, 2, 0, 0, 1, 1
]
}
# Provided data
L_Sum = [
    32, 17, 150, 25, 22, 48, 15, 103, 20, 46, 31, 20, 30, 21, 96, 14, 79, 86, 14, 27, 28, 22, 9, 14, 20, 24, 17, 11, 14, 13, 25, 11, 57, 10, 10, 50, 37, 3, 2, 14, 38, 29, 15, 23, 16, 9, 19, 8, 16, 20, 10, 8, 5, 24, 0, 37, 13, 5, 14, 8, 1, 2, 5, 28, 5, 32, 13, 13, 4, 4, 3, 6, 2, 0, 6, 8, 0, 0, 1, 4, 16, 17, 4, 1, 18, 6, 3, 2, 7, 0, 0, 0, 27, 13, 17, 96, 14, 29, 3, 2
]
M = [
    1, 1, 125, 19, 17, 39, 17, 37, 19, 50, 39, 26, 19, 26, 126, 19, 104, 110, 22, 19, 19, 19, 5, 19, 19, 19, 19, 19, 26, 20, 19, 15, 7, 17, 17, 64, 5, 5, 5, 5, 85, 19, 19, 14, 36, 20, 20, 7, 51, 50, 35, 14, 34, 1, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0
]

L_Sum = [
    96, 150, 86, 79, 38, 50, 16, 46, 20, 48, 31, 103, 16, 10, 5, 20, 21, 14, 14, 13, 19, 9, 25, 20, 30, 14, 28, 27, 22, 24, 20, 14, 17, 25, 29, 15, 11, 22, 15, 10, 10, 11, 23, 8, 57, 8, 37, 14, 9, 3, 2, 32, 17, 37, 29, 24, 13
]


M =  [
    126, 125, 110, 104, 85, 64, 51, 50, 50, 39, 39, 37, 36, 35, 34, 26, 26, 26, 22, 20, 20, 20, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 17, 17, 17, 17, 15, 14, 14, 7, 7, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1
]




# data = {
    
#     'All L' :L_Sum,
#     'Mapping': M
# }
# print (len(L_Sum))
# print(len(M))

# # Create a DataFrame
# df = pd.DataFrame(data)
# black_palette = ['#4f4f50', '#777878', '#a2a3a3', '#d0d0d0', '#ffffff']

# # Melt the DataFrame
# df_melted = df.melt(var_name='Method', value_name='Accuracy')

# # Create a boxplot
# plt.figure(figsize=(8, 6))
# sns.boxplot(x='Method', y='Accuracy', data=df_melted, palette=black_palette)
# plt.title('Boxplot of Accuracy', fontsize=14)
# plt.xlabel('VULDAP detection and Mapping sets', fontsize=14)
# plt.ylabel('Number of CVE Links', fontsize=14)
# # Adding LaTeX formatting for the labels
# # Adding LaTeX formatting for the labels
# plt.xticks(range(0, len(data) + 0), [
#     r'$\mathcal{L}$',
#     r'$\mathcal{M}$'
#     # r'$\mathcal{L}_{P} \cap \mathcal{M}_{P}$',
#     # r'$\mathcal{L}_{P} - \mathcal{M}_{P}$',
#     # r'$\mathcal{M}_{P} - \mathcal{L}_{P}$'
# ],fontsize=14)
# # Overlay mean lines
# means = df.mean().values
# for i, mean in enumerate(means):
#     plt.plot([i], [mean], marker='o', markersize=7, color='Black')
# plt.show()