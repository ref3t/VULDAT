import numpy as np
Lpositive = ['CVE-2002-1742', 'CVE-2001-0004', 'CVE-2000-1052', 'CVE-2002-0025']
LNegatives = ['CVE-2020-3452', 'CVE-2015-1241', 'CVE-2005-1650', 'CVE-2022-29951', 'CVE-2005-2162', 'CVE-2002-0722', 'CVE-2002-1841', 'CVE-2005-2198', 'CVE-2005-1869', 'CVE-2001-1042', 'CVE-2004-1602', 'CVE-2001-0446', 'CVE-2005-3288', 'CVE-2009-4017', 'CVE-2010-3152', 'CVE-2004-0847', 'CVE-2008-1700', 'CVE-2004-2262', 'CVE-2000-1212', 'CVE-2010-1573', 'CVE-2007-2713', 'CVE-2003-0174', 'CVE-2022-33139', 'CVE-2002-1730', 'CVE-2000-0854', 'CVE-2008-5285', 'CVE-2004-1104', 'CVE-2019-10744', 'CVE-2020-3566', 'CVE-2022-29238', 'CVE-2001-0901', 'CVE-2002-0367', 'CVE-2008-4122', 'CVE-2005-2263', 'CVE-2002-1688', 'CVE-2009-3232', 'CVE-2004-0128', 'CVE-2002-1451', 'CVE-2002-2094', 'CVE-2008-1303', 'CVE-2004-0030', 'CVE-2021-30860', 'CVE-2005-0877', 'CVE-2009-2054', 'CVE-2009-3231', 'CVE-2008-0087', 'CVE-2005-2086', 'CVE-2010-3131', 'CVE-2005-1880', 'CVE-2004-2252', 'CVE-2008-3843', 'CVE-2005-2027', 'CVE-2003-1026', 'CVE-2008-2613', 'CVE-2005-1527', 'CVE-2004-2227', 'CVE-2004-0380', 'CVE-2003-0844', 'CVE-2003-0395', 'CVE-2006-2428', 'CVE-2006-1173', 'CVE-2021-37147', 'CVE-2005-1879', 'CVE-2009-2382', 'CVE-2022-23607', 'CVE-2021-44228', 'CVE-2005-1892', 'CVE-2002-0433', 'CVE-2022-30317', 'CVE-2005-2837', 'CVE-2005-1678', 'CVE-2008-5125', 'CVE-2019-9534', 'CVE-2009-3781', 'CVE-2009-1048', 'CVE-2020-0688', 'CVE-2002-1372', 'CVE-2021-35395', 'CVE-2004-0892', 'CVE-2005-0918', 'CVE-2007-6652', 'CVE-2004-0778', 'CVE-2002-1154', 'CVE-2005-1668', 'CVE-2018-3721', 'CVE-2005-1681', 'CVE-2008-2122', 'CVE-2004-2146', 'CVE-2020-3161', 'CVE-2008-3438', 'CVE-2017-14623', 'CVE-2021-22909', 'CVE-2020-15708', 'CVE-2004-1611', 'CVE-2010-2076', 'CVE-2009-3597', 'CVE-2004-2144', 'CVE-2009-2960', 'CVE-2006-1126', 'CVE-2008-1319', 'CVE-2006-4068', 'CVE-2004-2061', 'CVE-2008-3324', 'CVE-2005-1964', 'CVE-2016-2496', 'CVE-2002-1145', 'CVE-2005-2157', 'CVE-2022-29952', 'CVE-2002-2064', 'CVE-2005-2428', 'CVE-2000-0342', 'CVE-2022-36436', 'CVE-2005-1688', 'CVE-2008-7109', 'CVE-2005-4900', 'CVE-2022-30313', 'CVE-2004-2268', 'CVE-2010-3397', 'CVE-2005-0587', 'CVE-2005-1835', 'CVE-2004-0068', 'CVE-2007-0100', 'CVE-2008-1737', 'CVE-2005-1864', 'CVE-2009-3107', 'CVE-2020-36049', 'CVE-2002-1704', 'CVE-2008-4929', 'CVE-2008-5180', 'CVE-2001-1488', 'CVE-2002-1484', 'CVE-2002-1770', 'CVE-2005-1876', 'CVE-2021-21972', 'CVE-2008-3680', 'CVE-2008-2433', 'CVE-2008-3812', 'CVE-1999-0073', 'CVE-2006-6658', 'CVE-2009-1928', 'CVE-2022-21668', 'CVE-2020-3580', 'CVE-2008-5563', 'CVE-2005-1868', 'CVE-2017-5697', 'CVE-2001-1043', 'CVE-2003-0981', 'CVE-2010-3402', 'CVE-2005-1894', 'CVE-2001-1452', 'CVE-2001-1386', 'CVE-2006-4558', 'CVE-2009-2299', 'CVE-2001-0643', 'CVE-2010-1795', 'CVE-2007-1409', 'CVE-2009-2540', 'CVE-2021-41084', 'CVE-2007-3409', 'CVE-2020-10148', 'CVE-2022-30034', 'CVE-2022-24985', 'CVE-2009-2858', 'CVE-2007-6033', 'CVE-2003-0190', 'CVE-2008-4114', 'CVE-2002-2054', 'CVE-2004-2219', 'CVE-2019-10071', 'CVE-2002-1734', 'CVE-2005-0243', 'CVE-2022-31162']
Mapping = ['CVE-2002-1742', 'CVE-2001-0004', 'CVE-2000-1052', 'CVE-2002-0025']

true_predicted = np.array([6, 9, 1, 8, 7, 15, 1, 0, 9, 3, 2, 22, 6, 5, 16, 3, 7, 7, 4, 0, 8, 1, 1, 5, 6, 12, 6, 8, 26, 1, 0, 0, 2, 3, 16, 22, 9, 4, 5, 7, 10, 17, 10, 10, 3, 12, 5, 10, 10, 20, 1, 2, 8, 3, 3, 7, 12, 2, 6, 8, 2, 3, 9, 4, 6, 5, 19, 17, 14, 4, 2, 0, 6, 1, 19, 11, 8, 11, 8, 4, 5, 10, 29, 15, 4, 6, 20, 0, 34, 1, 33, 6, 0, 6, 57, 4, 55, 4, 30, 21, 4, 31, 21, 9, 6, 29, 71, 17, 4, 14, 1, 3, 9, 23])
false_predicted = np.array([26, 54, 1, 2, 65, 28, 19, 7, 60, 62, 5, 237, 103, 74, 35, 370, 71, 89, 17, 0, 102, 178, 1, 11, 25, 51, 60, 25, 69, 29, 15, 11, 152, 4, 234, 95, 179, 204, 69, 30, 99, 221, 308, 152, 22, 134, 86, 84, 235, 9, 23, 78, 252, 81, 120, 40, 75, 93, 15, 83, 8, 38, 74, 39, 65, 14, 59, 207, 9, 75, 109, 14, 17, 56, 242, 38, 97, 7, 92, 99, 28, 8, 155, 68, 76, 212, 45, 41, 16, 35, 22, 103, 32, 62, 116, 172, 271, 77, 46, 3, 219, 109, 75, 72, 167, 76, 186, 219, 81, 84, 0, 77, 44, 227])
actual_values = np.array([13, 16, 3, 28, 16, 22, 3, 5, 20, 26, 19, 26, 6, 6, 18, 3, 22, 19, 17, 16, 20, 1, 19, 19, 19, 19, 19, 19, 28, 2, 1, 1, 5, 8, 17, 30, 11, 7, 7, 7, 10, 17, 10, 10, 10, 19, 6, 14, 10, 23, 18, 7, 14, 7, 7, 19, 14, 7, 7, 9, 19, 19, 19, 19, 19, 23, 30, 19, 20, 5, 3, 1, 17, 1, 20, 19, 14, 13, 19, 20, 17, 10, 30, 21, 6, 6, 20, 7, 34, 3, 33, 6, 1, 7, 65, 4, 72, 7, 39, 27, 4, 44, 36, 10, 8, 31, 72, 25, 8, 20, 26, 28, 31, 30])

true_predicted = np.array(Lpositive)
false_predicted = np.array(LNegatives)
actual_values = np.array(Mapping)

prediction = np.concatenate((true_predicted, false_predicted))


def jaccard_similarity(list1, list2):
    intersection = len(list(set(list1).intersection(list2)))
    union = (len(list1) + len(list2)) - intersection
    return float(intersection) / union



import pandas as pd

# Read the Excel file with specified column names
df = pd.read_excel("./results/AllCapec2.xlsx")

# Accessing the data using column names
Lpositive = df["Lpositive"]
LNegatives = df["LNegatives"]
Mapping = df["Mapping"]

# Printing the data to verify
jaccard_index = 0
for row in range(len(Lpositive)):
    # print("Lpositive:", Lpositive[row])
    # print("LNegatives:", LNegatives[row])
    # print("Mapping:", Mapping[row])
    if len(Lpositive[row]) == 0:
        Lpositive[row] = []
    if len(LNegatives[row]) == 0:
        LNegatives[row] = []
    prediction = Lpositive[row] + LNegatives[row]
    # prediction = np.concatenate((Lpositive[row], LNegatives[row]))
    jaccard_index += jaccard_similarity(prediction, Mapping[row])


print(len(Lpositive))
print(jaccard_index/len(Lpositive))



# jaccard_index = jaccard_similarity(prediction, actual_values)
# print("Jaccard Index:", jaccard_index)
import matplotlib.pyplot as plt

# Data
jaccard_similarity = [0.314917127, 0.022727273, 0.160349854, 0.047619048, 0.352941176, 0.7, 0.01793722, 0.202614379, 0.189189189, 0.109756098, 0.034285714, 0.271028037, 0.275193798, 0.069672131, 0.04494382, 0.134615385, 0.038461538, 0.028571429, 0.12, 0.089494163, 0.153846154, 0.128571429, 0.25, 0.266666667, 0.086419753, 0.3, 0.045454545, 0, 0.1125, 0.034090909, 0.083333333, 0.08365019, 0.055045872, 0.0625, 0.301886792, 0.008042895, 0.075268817, 0.064814815, 0.117647059, 0, 0.06557377, 0.005586592, 0.05, 0.166666667, 0.136363636, 0.171428571, 0.075949367, 0.181818182, 0.268041237, 0.032258065, 0, 0, 0.012738854, 0.25, 0.06374502, 0.176, 0.047368421, 0.018957346, 0.065789474, 0.189189189, 0.091743119, 0.071428571, 0.031446541, 0.061728395, 0.09375, 0.078431373, 0.054347826, 0.102040816, 0.040816327, 0.625, 0.024390244, 0.023529412, 0.030075188, 0.034090909, 0.023622047, 0.118644068, 0.134831461, 0.02, 0.272727273, 0.086956522, 0.074074074, 0.052631579, 0.096774194, 0.068965517, 0.071428571, 0.135135135, 0.213483146, 0.075221239, 0.482758621, 0.05, 0.017857143, 0, 0.176470588, 0.01754386, 0.072519084, 0.192982456, 0.072072072, 0.55, 0.072072072, 0.033613445, 0.111111111, 0.555555556, 0.156756757, 0.168539326, 0.048780488, 0.027522936, 0.307692308, 0, 0.68, 0.026315789, 0.6, 0.055045872, 0, 0.086956522]
prediction_accuracy = [0.329479769, 0.022727273, 0.168711656, 0.049382716, 0.394736842, 0.875, 0.01793722, 0.221428571, 0.21875, 0.111111111, 0.034682081, 0.276190476, 0.276264591, 0.072033898, 0.047058824, 0.142857143, 1, 0.0375, 0.169811321, 0.092, 0.1875, 0.142857143, 0.5, 0.8, 0.097222222, 0.348837209, 0.05, 0, 0.130434783, 0.046153846, 0.285714286, 0.084942085, 0.055045872, 0.063291139, 0.31372549, 0.008042895, 0.08974359, 0.072916667, 0.19047619, 0, 0.072727273, 0.005586592, 0.5, 0.3125, 0.193548387, 0.19047619, 0.090909091, 0.242424242, 0.273684211, 0.033333333, 0, 0, 0.012987013, 0.428571429, 0.064, 0.188034188, 0.04787234, 0.019230769, 0.067567568, 0.189189189, 0.091743119, 0.071428571, 0.031446541, 0.061728395, 0.12, 0.082191781, 0.054945055, 0.106382979, 0.040816327, 0.689655172, 0.041666667, 0.025, 0.030769231, 0.035714286, 0.024390244, 0.14893617, 0.137931034, 0.021052632, 0.285714286, 0.087912088, 0.2, 0.073170732, 0.108433735, 0.093023256, 0.084507042, 0.263157895, 0.243589744, 0.075892857, 0.608695652, 0.050632911, 0.018018018, 0, 0.260869565, 0.01754386, 0.072796935, 0.224489796, 0.076190476, 0.611111111, 0.08, 0.038834951, 0.151515152, 0.555555556, 0.157608696, 0.180722892, 0.05, 0.027522936, 0.307692308, 0, 0.68, 0.027777778, 0.6, 0.055045872, 0, 0.088235294]

# Create scatter plot
plt.figure(figsize=(8, 6))
plt.scatter(jaccard_similarity, prediction_accuracy, color='blue', alpha=0.7)
plt.title('The Jaccard Index compared to the Prediction Accuracy for each Attack Pattern. ')
plt.xlabel('Jaccard  Index', fontsize=16)
plt.ylabel('Prediction Accuracy', fontsize=16)
plt.grid(True)
plt.show()