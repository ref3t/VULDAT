import pandas as pd
import re

file2 = open('CVE_CWE_mappingn.txt', 'w', encoding='utf-8')
def find_mapping_cwe():
    mapping_cve_cwe = []
    df = pd.read_csv('../datasets/datasetcwelanguages/c.csv')
    class_names = list(df.columns)
    df = pd.DataFrame( df.values,columns=class_names)
    # loop over the rows and columns of the DataFrame
    for index, row in df.iterrows():
        for column in df.columns:
            # print(row)
            if 'cve' in str(row[column]).lower():
                list_of_cve = str(row[column]).split("::")
                for li in list_of_cve:
                    if len(li) > 0: 
                        mapping_cve_cwe.append(f"CWE-id:{row['CWE-ID']}^{li}^CWE-Name:{row['Name']}")
    return mapping_cve_cwe

"""function for search about missing cve ids"""
def search_id_exist_in_list(id, listdata):
    return list(filter(lambda x: id in x, listdata))

def find_mapping_from_nvd():
    df = pd.read_json('../datasets/NVD/nvdcve.json', encoding='ISO-8859-1')
    # dfclang = pd.read_csv('./datasets/datasetcwelanguages/c.csv')
    dfclang = pd.read_csv('../datasets/datasetcwelanguages/c.csv')
    cwe_id_in_file = (dfclang['CWE-ID']).to_list()
    cwe_id_in_file  = [str(element) for element in cwe_id_in_file]#convert list to string
    # datac = ['14', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '134', '135', '170', '188', '191', '192', '194', '195', '196', '197', '242', '243', '244', '362', '364', '366', '374', '375', '401', '415', '416', '457', '460', '462', '463', '464', '466', '467', '468', '469', '474', '476', '478', '479', '480', '481', '482', '483', '484', '495', '496', '558', '560', '562', '587', '676', '685', '688', '689', '690', '704', '733', '762', '781', '782', '783', '785', '787', '789', '805', '806', '839', '843', '910', '911', '1325', '1335', '1341']
    mapping_results = []
    missing_cve_nvd = []
    # mapping from NVD
    for cwe_c in cwe_id_in_file:
        flag=1
        for cves in df['CVE_Items']:
            cve_map = cves['cve']['CVE_data_meta']
            cwe_contains = cves['cve']['problemtype']['problemtype_data']
            description_cve = cves['cve']['description']['description_data']
            for onn in cwe_contains:
                if len(onn['description']) > 0:
                    for des in onn['description']:
                        if cwe_c in des['value']:
                            flag = 0
                            name_cwe = get_cwe_name_if_missing(cwe_c)
                            mapping_results.append(f"cwe_id:{str(cwe_c)}^cve_id:{cve_map['ID']}^description:{description_cve[0]['value']}^CWE-Name:{name_cwe}")
                            # print (f"cwe_id:{str(cwe_c)}^cve_id:{cve_map['ID']}")
        if flag==1:
            missing_cve_nvd.append(cwe_c)       

    #mapping form cwe
    # res = search_id_exist_in_list("119",mapping_results)
    return (missing_cve_nvd,mapping_results)

"""clear data from cve_cwe"""
def clear_output_cve_cwe(listdata):
    final_clear_cve_cwe = []
    for ele in listdata:
        if ":LINK:https:" in ele:
            ele =ele.replace(":LINK:https:","$http$")
        data_split = ele.split("^") 
        if not "REFERENCE:" in ele:
            continue
        cwe_id = data_split[0].split(':')[1]
        cve_data = data_split[1].split(':')
        cve_id = cve_data[1]
        cve_des = cve_data[3]
        final_clear_cve_cwe.append(f"cwe_id:{cwe_id}^cve_id:{cve_id}^description:{cve_des.replace('$http$',':LINK:https:')}^{data_split[2]}")
        # print (f"cwe_id:{data_split[1]}^cve_id:{data_split[3]}^description:{data_split[5]}")
    return final_clear_cve_cwe

def print_data_to_fil(data):
    for element in data:
        file2.write(f"{element}\n")

def get_cwe_name_if_missing(cwe_id):
    import requests
    cwe_url = f"https://cwe.mitre.org/data/definitions/{cwe_id}.html"
    cwe_resp = requests.get(cwe_url)
    cwe_name = None
    if cwe_resp.status_code == 200:
        cwe_lines = cwe_resp.text.split("\n")
        for line in cwe_lines:
            if f"CWE-{cwe_id}" in line:
                cwe_name = line.strip().replace("<title\>", "").replace("</title>", "")
                break
    if cwe_name:
        return cwe_name.replace(f"CWE-{cwe_id}:","")
    else:
        return ""

if __name__ == "__main__":
    print (f"===============================================================================\n\t\t\tMapping cve with cwe\n===============================================================================")
    missing_ids, mapping_ids = find_mapping_from_nvd()
    print (f"\t\tcount of the mapping from nvd = ({len(mapping_ids)}))\n\t***********************************************************************")
    maping_cve_cwe = find_mapping_cwe()
    print (f"\t\tcount of the mapping from cwe = ({len(maping_cve_cwe)})\n\t***********************************************************************")
    
    #find the missing cve from nvd and remove it from cwe
    for elm in maping_cve_cwe:
        for mis in missing_ids:
            if mis == str(elm).split("^")[0]:
                missing_ids.remove(mis)
    #print ids that not exist any mapping  
    # print (missing_ids)
    print (f"\t\tcount of the missing mapping = ({len(missing_ids)})\n\t***********************************************************************")
    

    #check if we have same id on both dataset it seems no
    duplicate_id = []  
    for elm in maping_cve_cwe:
        flag = 0 
        for map in mapping_ids:
            elm2 = (str(elm).replace(':','^')).split("^")
            map2 = map.replace(':','^').split("^")
            if elm2[0] == map2[1]:
                if elm2[2] == map2[3]:
                    duplicate_id.append(map)
    
    print (f"\t\tcount of the duplicate value from mapping (cwe,NVD) = ({len(duplicate_id)})\n\t***********************************************************************")
   
    maping_cve_cwe = clear_output_cve_cwe(maping_cve_cwe)#take time because run request.

    print_data_to_fil(maping_cve_cwe)
    print_data_to_fil(mapping_ids)
    file2.close()



    


